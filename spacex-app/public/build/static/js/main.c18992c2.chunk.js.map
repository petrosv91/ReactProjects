{"version":3,"sources":["logo.png","components/launchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","launchItem","props","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","index","key","Component","LAUNCH_QUERY","Launch","this","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","text_success","text_danger","client","ApolloClient","uri","App","src","logo","alt","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c18992c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.de636e85.png\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\nexport default function launchItem(props) {\r\n  const {\r\n    flight_number,\r\n    mission_name,\r\n    launch_date_local,\r\n    launch_success\r\n  } = props.launch;\r\n\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>\r\n            Mission:{' '}\r\n            <span\r\n              className={classNames({\r\n                'text-success': launch_success,\r\n                'text-danger': !launch_success\r\n              })}\r\n            >\r\n              {mission_name}\r\n            </span>\r\n          </h4>\r\n          <p>\r\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n          </p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n            Launch Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function MissionKey() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './launchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <MissionKey />\r\n        <Query query={LAUNCHES_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h4>Loading...</h4>;\r\n            if (error) console.log(error);\r\n\r\n            return (\r\n              <>\r\n                {data.launches.map((launch, index) => (\r\n                  <LaunchItem key={index} launch={launch} />\r\n                ))}\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launches;\r\n","/** @format */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launch extends Component {\r\n    render() {\r\n        let { flight_number } = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n        return (\r\n            <>\r\n                <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <h4>Loading...</h4>;\r\n                        if (error) console.log(error);\r\n\r\n                        const {\r\n                            mission_name,\r\n                            flight_number,\r\n                            launch_year,\r\n                            launch_success,\r\n                            rocket: { rocket_id, rocket_name, rocket_type }\r\n                        } = data.launch;\r\n                        return (\r\n                            <>\r\n                                <h1 className='display-4 my-3'>\r\n                                    <span className='text-dark'>Mission: </span>\r\n                                    {mission_name}\r\n                                </h1>\r\n                                <h4 className='mb-3'>Launch Details</h4>\r\n                                <ul className='list-group'>\r\n                                    <li className='list-group-item'>\r\n                                        Flight_number: {flight_number}\r\n                                    </li>\r\n                                    <li className='list-group-item'>\r\n                                        Launch Year: {launch_year}\r\n                                    </li>\r\n                                    <li className='list-group-item'>\r\n                                        Launch Successful:{' '}\r\n                                        <span\r\n                                            className={classNames({\r\n                                                text_success: launch_success,\r\n                                                text_danger: !launch_success\r\n                                            })}>\r\n                                            {launch_success ? 'Yes' : 'No'}\r\n                                        </span>\r\n                                    </li>\r\n                                </ul>\r\n                                <h4 className='my-3'>Rocket Details</h4>\r\n                                <ul className='list-group'>\r\n                                    <li className='list-group-item'>\r\n                                        Rocket ID: {rocket_id}\r\n                                    </li>\r\n                                    <li className='list-group-item'>\r\n                                        Rocket Name: {rocket_name}\r\n                                    </li>\r\n                                    <li className='list-group-item'>\r\n                                        Rocket Type: {rocket_type}\r\n                                    </li>\r\n                                </ul>\r\n                                <hr />\r\n                                <Link to='/' className='btn btn-secondary'>\r\n                                    Back\r\n                                </Link>\r\n                            </>\r\n                        );\r\n                    }}\r\n                </Query>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Launch;\r\n","/** @format */\n\nimport React from 'react';\nimport './App.css';\nimport logo from './logo.png';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div className='container'>\n                    <img src={logo} alt='' />\n                    <Switch>\n                        <Route exact path='/' component={Launches} />\n                        <Route\n                            exact\n                            path='/launch/:flight_number'\n                            component={Launch}\n                        />\n                    </Switch>\n                </div>\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}